name: create_release
description: "Creates a release"

inputs:
  gpg_private_key:
    description: "GPG Private key to import for tag signing"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase to import private-key"
    required: true
  token:
    description: "Token required to trigger the workflow."
    required: true
  draft:
    description: "Indicator of whether or not this release is a draft"
    required: false
  prerelease:
    description: "Indicator of whether or not is a prerelease"
    required: false
  name:
    description: "Name of the release. defaults to tag name"
    required: false
  release_type:
    description: "Indicator of the release type"
    required: true
  versionFile:
    description: "Version file to update version information"
    required: true
  ngrokToken:
    description: "NGROK-Token for debugging"
    required: false

runs:
  using: "composite"

  steps:

    - name: check version file
      shell: bash
      run: |
        if [[ ! -f "${{github.workspace}}/gradle.properties" ]]; then
          echo >&2 "Required file 'gradle.properties' does not exist!"
          exit 1;
        fi

    - name: check semver
      shell: bash
      run: |
        branch="${{ github.ref_name }}"
        release_type="${{ inputs.release_type }}"

        if [[ ! "${branch}" =~ ^(development|hotfix/.+)$ ]]; then
          echo >&2 "Origin branch must be 'development' or a hotfix branch!"
          exit 1;
        fi

        if [[ "${branch}" == development && "${release_type}" == "patch" ]]; then
          echo >&2 "${release_type^} releases can only be triggered from a hotfix branch!"
          exit 1;
        fi

        if [[ "${branch}" =~ ^hotfix/.+ && "${release_type}" != "patch" ]]; then
          echo >&2 "${release_type^} releases can only be triggered from 'development'!"
          exit 1;
        fi

    - name: import gpg
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5.0.0
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: calculate tag
      id: tag
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ inputs.token }}
        default_bump: ${{inputs.release_type}}
        dry_run: true
        release_branches: "release.*,hotfix.*,main,development"

    - name: compare current and new version
      shell: bash
      run: |
        orig_version=$(grep -E "version=" gradle.properties | cut -d "=" -f2)
        curr_version=$(tr -cd '[0-9.]' <<< $orig_version)
        new_version=${{ steps.tag.outputs.new_version }}

        curr_number=$(tr -d '.' <<< $curr_version)
        new_number=$(tr -d '.' <<< $new_version)

        if [[ $new_number -lt $curr_number ]]; then
          echo >&2 "New version ${new_version} has lower preference than current version ${orig_version}!"
          echo >&2 "It should be the other way around. Maybe you forgot to catchup with main first?"
          exit 1;
        fi

    - name: update gradle.properties
      env:
        newVersion: ${{ steps.tag.outputs.new_version }}
      shell: bash
      run: |
        sed -i -E "s/(version=).*/\1${{env.newVersion}}/" gradle.properties

    - name: commit tag + version
      shell: bash
      env:
        newTag: ${{steps.tag.outputs.new_tag}}
        newVersion: ${{steps.tag.outputs.new_version}}
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      run: |
        git commit -S -m "[github] updated ${{inputs.release_type}} version to ${{ env.newVersion }}" -- gradle.properties &> /dev/null
        git tag -sam "[github] created new tag ${{ env.newTag }}" ${{ env.newTag }}

    - name: git push
      uses: CasperWA/push-protected@v2.10.0
      with:
        token: ${{ inputs.token }}
        tags: true
        branch: "main"
        debug: true
        force: true


#    - name: Start SSH via Ngrok
#      shell: bash
#      run: curl -sL https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
#      env:
#        # After sign up on the https://ngrok.com/
#        # You can find this token here: https://dashboard.ngrok.com/get-started/setup
#        NGROK_TOKEN: ${{ inputs.ngrokToken }}
#
#        # This password you will use when authorizing via SSH
#        # USER_PASS: ${{ secrets.USER_PASS }}
#        USER_PASS: debug
#
#    - name: Don't kill instace
#      shell: bash
#      run: sleep 1h # Prevent to killing instance after failure

    - name: catchup main => development
      shell: bash
      run: |
        git config pull.ff only
        git checkout development
        git pull
        git pull origin main

    - name: calculate new snapshot version
      id: snapshot_version
      env:
        version: ${{steps.tag.outputs.new_version}}
        release_type: ${{inputs.release_type}}
      shell: bash
      run: |
        IFS="." read -r -a parts <<< "${{env.version}}"
        declare -A idxs=([major]=0 [minor]=1 [patch]=2)
        idx=${idxs[${{env.release_type}}]}
        parts[$idx]=$((${parts[$idx]}+1))
        version="$(echo ${parts[*]} | tr ' ' '.')-SNAPSHOT"

        echo "::set-output name=value::${version}"

    - name: update gradle.properties
      env:
        snapshotVersion: ${{steps.snapshot_version.outputs.value}}
      shell: bash
      run: |
        sed -i -E "s/(version=).*/\1${{env.snapshotVersion}}/" gradle.properties

    - name: commit SNAPSHOT version
      shell: bash
      env:
        snapshotVersion: ${{steps.snapshot_version.outputs.value}}
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      run: |

        git commit -S -m "[github] update SNAPSHOT-version to ${{ env.snapshotVersion }}" -- gradle.properties 2> /dev/null

    - name: git push
      uses: CasperWA/push-protected@v2.10.0
      with:
        token: ${{ inputs.token }}
        branch: "development"
        debug: true

    - name: changelog config template
      id: changelog_config_path
      shell: bash
      run: |
        config_path=$(find . -name "changelog-config.json" | head -1)
        echo $config_path
        echo "::set-output name=value::${config_path}"

    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v3
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        configuration: ${{steps.changelog_config_path.outputs.value}}

    - name: Create Release
      uses: softprops/action-gh-release@v0.1.14
      with:
        draft: ${{inputs.draft}}
        prerelease: ${{inputs.draft}}
        name: ${{inputs.name}}
        body: ${{steps.github_release.outputs.changelog}}
        tag_name: ${{steps.tag.outputs.new_tag}}

    - name: hotfix - remove branch
      if: startsWith(github.ref_name, 'hotfix/')
      shell: bash
      run: |
        echo "Deleting hotfix branch ${{ github.ref_name }}"
        git push -d origin ${{ github.ref_name }} &> /dev/null