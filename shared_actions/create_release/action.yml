name: create_release
description: "Creates a release"

inputs:
  gpg_private_key:
    description: "GPG Private key to import for tag signing"
    required: true
  gpg_passphrase:
    description: "GPG Passphrase to import private-key"
    required: true
  token:
    description: "Token required to trigger the workflow."
    required: true
  draft:
    description: "Indicator of whether or not this release is a draft"
    required: false
  prerelease:
    description: "Indicator of whether or not is a prerelease"
    required: false
  name:
    description: "Name of the release. defaults to tag name"
    required: false
  release_type:
    description: "Indicator of the release type"
    required: true
  versionFile:
    description: "Version file to update version information"
    required: true
  ngrokToken:
    description: "NGROK-Token for debugging"
    required: false
  ngrokDebugEnable:
    description: "Whether to launch ngrok debugging on step failures"
    required: false
  requiredBranches:
    description: "List of branches allowed to create a release from"
    required: false
  requiredBranchPattern:
    description: "Regex pattern to identify allowed branches to create a release from"
    default: "^release/.+|main$"
    required: false
  files:
    description: "Newline-delimited globs of paths to assets to upload for release"
    required: false


outputs:
  upload_url:
    description: "Upload URL for release assets"
    value: ${{ steps.create_release.outputs.urload_url }}
  version:
    description: "Upload URL for release assets"
    value: ${{ steps.tag.outputs.new_version }}

runs:

  using: "composite"

  steps:

    - name: check version file
      shell: bash
      run: |
        if [[ ! -f "${{github.workspace}}/gradle.properties" ]]; then
          echo >&2 "Required file 'gradle.properties' does not exist!"
          exit 1;
        fi

    - name: check workflow origin
      shell: bash
      if: ${{ inputs.requiredBranches != '' ||  inputs.requiredBranchPattern != '' }}
      run: |
        branch="${{ github.ref_name }}"
        reqBranches="${{ inputs.requiredBranches }}"
        reqBranchPattern="${{ inputs.requiredBranchPattern }}"

        if [[ ${#reqBranches} -gt 0 && ! "${reqBranches}" =~ "${branch}" ]]; then
            echo >&2 "Workflow can only be executed on branches '${reqBranches}'!"
            exit 1;
        fi

        if [[ ! "${branch}" =~ ${reqBranchPattern} ]]; then
            echo >&2 "Workflow can only be executed on branches matching pattern '${reqBranchPattern}'!"
            exit 1;
        fi


    - name: import gpg
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v5.0.0
      with:
        gpg_private_key: ${{ inputs.gpg_private_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: calculate tag
      id: tag
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ inputs.token }}
        default_bump: ${{inputs.release_type}}
        dry_run: true
        release_branches: "release.*,hotfix.*,main,development"

    - name: compare current and new version
      shell: bash
      run: |
        orig_version=$(grep -E "version=" gradle.properties | cut -d "=" -f2)

        IFS="." read -r -a curr_version <<<"$(tr -cd '[0-9.]' <<< $orig_version)"
        IFS="." read -r -a new_version <<< "${{ steps.tag.outputs.new_version }}"

        type=
        if [[ ${new_version[0]} -ge ${curr_version[0]} ]]; then #major update
          type=major
        elif [[ ${type} == "major" && ${new_version[1]} -ge ${curr_version[1]} ]]; then #minor change
          type=minor
        elif [[ ${type} == "minor" && ${new_version[2]} -ge ${curr_version[2]} ]]; then #patch update
          type=patch
        fi

        if [[ ! "${type}" =~ major|minor|patch ]]; then
          echo >&2 "New version ${{ steps.tag.outputs.new_version }} has lower preference than current version ${orig_version}!"
          echo >&2 "It should be the other way around. Maybe you forgot to catchup with main first?"
          exit 1;
        fi

    - name: update gradle.properties
      env:
        newVersion: ${{ steps.tag.outputs.new_version }}
      shell: bash
      run: |
        sed -i -E "s/(version=).*/\1${{env.newVersion}}/" gradle.properties

    - name: commit tag + version
      shell: bash
      env:
        newTag: ${{steps.tag.outputs.new_tag}}
        newVersion: ${{steps.tag.outputs.new_version}}
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      run: |
        git commit -S -m "[github] updated ${{inputs.release_type}} version to ${{ env.newVersion }}" -- gradle.properties &> /dev/null
        git tag -sam "[github] created new tag ${{ env.newTag }}" ${{ env.newTag }}

    - name: git push
      uses: CasperWA/push-protected@v2.10.0
      with:
        token: ${{ inputs.token }}
        tags: true
        branch: "main"
        debug: true
        force: true

    - name: catchup main => development
      shell: bash
      run: |
        git checkout development
        git pull

    - name: calculate development version
      id: development_version
      env:
        version: ${{steps.tag.outputs.new_version}}
        release_type: ${{inputs.release_type}}
      shell: bash
      run: |
        IFS="." read -r -a parts <<< "${{env.version}}"
        parts[2]=$((parts[2]+1)) #increment patch version
        version="$(echo ${parts[*]} | tr ' ' '.')-SNAPSHOT"
        echo "value=${version}" >> $GITHUB_OUTPUT

    - name: update gradle.properties
      env:
        developmentVersion: ${{steps.development_version.outputs.value}}
      shell: bash
      run: |
        sed -i -E "s/(version=).*/\1${{env.developmentVersion}}/" gradle.properties

    - name: commit development version
      shell: bash
      env:
        developmentVersion: ${{steps.development_version.outputs.value}}
        GITHUB_TOKEN: ${{ inputs.token }}
        GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
      run: |

        git commit -S -m "[github] update version to ${{ env.developmentVersion }}" -- gradle.properties

    - name: git push
      uses: CasperWA/push-protected@v2.10.0
      with:
        token: ${{ inputs.token }}
        branch: "development"
        debug: true

    - name: changelog config template
      id: changelog_config_path
      shell: bash
      run: |
        config_path=$(find . -name "changelog-config.json" | head -1)
        echo $config_path
        echo "value=${config_path}" >> $GITHUB_OUTPUT

    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v3
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        configuration: ${{steps.changelog_config_path.outputs.value}}

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        draft: ${{inputs.draft}}
        prerelease: ${{inputs.draft}}
        name: ${{inputs.name}}
        body: ${{steps.github_release.outputs.changelog}}
        tag_name: ${{steps.tag.outputs.new_tag}}
        files: ${{ inputs.files }}