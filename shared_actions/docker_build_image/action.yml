name: docker_build_image
description: "Builds and tags a container image with Docker"

inputs:
  image:
    description: "Value to use as name of docker container image"
    required: true
  imageTags:
    description: "Tags used for tagging the image"
    required: true
  context:
    description: "Path to use as docker build context"
    required: false
    default: "."
  dockerfilePath:
    description: "Path of DockerFile"
    required: false
    default: "Dockerfile"
  scanImage:
    description: "Scan image for vulnerabilities"
    required: false
    default: "true"

outputs:
  images:
    description: "Name of tagged docker images"
    value: "${{ steps.tag_images.outputs.images }}"
  docker_image:
    description: "Name of created container image"
    value: "${{ steps.build_image.outputs.docker_image }}"
  tags:
    description: "Tags of the container image"
    value: "${{ steps.tag_image.outputs.tags }}"

runs:
  using: "composite"
  steps:

    - name: current date
      id: current_date
      shell: bash
      run: |
        echo "::set-output name=date::$(date --rfc-3339=seconds)"

    - name: get primary tag
      id: tag_image
      env:
        tags: ${{inputs.imageTags}}
      shell: bash
      run: |
        IFS="," read -r -a parts <<<"${{env.imageTags}}"
        echo "tag=${parts[0]}" >> $GITHUB_OUTPUT

        #added backwards compatibility
        echo "tags=${{env.imageTags}}" >> $GITHUB_OUTPUT

    - name: Docker meta
      uses: docker/metadata-action@v4
      id: meta
      env:
        tag: ${{steps.tag_image.outputs.tag}}
      with:
        images: ${{inputs.image}}
        tags: |
          type=raw,value=${{env.tag}}

    - name: Build Docker Image
      id: build_image
      shell: bash
      env:
        tags: ${{inputs.imageTags}}
      run: |
        cat <<EOF > meta.json
          ${{steps.meta.outputs.json}}
        EOF

        image=$(cat meta.json | jq ".tags[0]" | tr -d '"')
        echo "image=${image}" >> $GITHUB_OUTPUT

        cat meta.json | jq ".labels" \
                  | tr -d '{} ' \
                  | grep -v "^$" \
                  | sed 's/:/=/' \
                  | sed -E "s/^\"([^\"]+)\"(.*)/\1\2/" \
                  | tr -d "," > labels


        cmd="docker build"
        while read label; do { cmd="${cmd} --label $label";  } done < labels

        cmd="$cmd --label org.label-schema.vcs-ref="${{github.sha}}""

        cmd="$cmd -f ${{ inputs.dockerfilePath }}"
        cmd="$cmd -t $image"
        cmd="$cmd ${{ inputs.context }}"

        echo "$cmd"
        $cmd

        echo "docker_image=${image}" >> $GITHUB_OUTPUT

    - name: tag images
      id: tag_images
      env:
        tags: ${{inputs.imageTags}}
        origImage: ${{ steps.build_image.outputs.docker_image }}
      shell: bash
      run: |
        origImage="${{ env.origImage }}"
        repo=$(echo ${origImage} | cut -d":" -f1)
        IFS="," read -r -a imageTags <<<"${{env.imageTags}}"
        images=()

        for tag in ${imageTags[*]}; do {
          newImage="${repo}:${tag}"
          docker tag $origImage $newImage
          images+=("${newImage}")
        } done

        echo "images=${images[*]}" >> $GITHUB_OUTPUT



    - name: Scan image for vulnerabilities
      if: ${{inputs.scanImage != 'false' }}
      uses: docker://docker.io/aquasec/trivy
      with:
        args: image --ignore-unfixed --exit-code 1 --security-checks vuln --severity "HIGH,CRITICAL" ${{steps.build_image.outputs.docker_image}}
