name: docker_build_image
description: "Builds and tags a container image with Docker"

inputs:
  image:
    description: "Value to use as name of docker container image"
    required: true
  imageTags:
    description: "Tags used for tagging the image"
    required: true
  context:
    description: "Path to use as docker build context"
    required: false
    default: "."
  dockerfilePath:
    description: "Path of DockerFile"
    required: false
    default: "Dockerfile"
  scanImage:
    description: "Scan image for vulnerabilities"
    required: false
    default: "true"

outputs:
  images:
    description: "Name of tagged docker images"
    value: "${{ steps.tag_images.outputs.images }}"
  docker_image:
    description: "Name of created container image"
    value: "${{ steps.build_image.outputs.docker_image }}"
  tags:
    description: "Tags of the container image"
    value: "${{ steps.tag_image.outputs.tags }}"

runs:
  using: "composite"
  steps:

    - name: get primary tag
      id: tag_image
      env:
        tags: ${{inputs.imageTags}}
      shell: bash
      run: |
        IFS="," read -r -a parts <<<"${{env.imageTags}}"
        echo "tag=${parts[0]}" >> $GITHUB_OUTPUT

        #added backwards compatibility
        echo "tags=${parts[*]}" >> $GITHUB_OUTPUT


        metadata-action-tags=()
        for tag in ${parts[*]}; do {
          metadata-actions-tags+=("type=raw,value=${tag}")
        } done

        echo "tags=${metadata-actions-tags[@]}" >> $GITHUB_OUTPUT


    - name: Docker meta
      uses: docker/metadata-action@v4
      with:
        images: ${{inputs.image}}
        tags: ${{steps.tag_image.outputs.tags }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ${{inputs.context}}
        file: ${{inputs.dockerFilePath}}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    #- name: Scan image for vulnerabilities
    #  if: ${{inputs.scanImage != 'false' }}
    #  uses: docker://docker.io/aquasec/trivy
    #  with:
    #    args: image --ignore-unfixed --exit-code 1 --security-checks vuln --severity "HIGH,CRITICAL" ${{steps.build_image.outputs.docker_image}}
