name: docker_build_image
description: "Builds and tags a container image with Docker"

inputs:
  image:
    description: "Value to use as name of docker container image"
    required: true
  context:
    description: "Path to use as docker build context"
    required: false
    default: "."
  dockerfilePath:
    description: "Path of DockerFile"
    required: false
    default: "Dockerfile"
  scanImage:
    description: "Scan image for vulnerabilities"
    required: false
    default: "true"

outputs:
  docker_image:
    description: "Name of created container image"
    value: "${{ steps.build_image.outputs.docker_image }}"
  tags:
    description: "Tags of the container image"
    value: "${{ steps.tag_image.outputs.tags }}"

runs:
  using: "composite"
  steps:

    - name: current date
      id: current_date
      shell: bash
      run: |
        echo "::set-output name=date::$(date --rfc-3339=seconds)"

    - name: current version
      id: version
      shell: bash
      run: |

        for file in package.json gradle.properties; do {
          version=$(find . -maxdepth 1 -name package.json -exec sh -c 'grep -E "version" {}' \;
          if [[ "$file" == "package.json" ]]; then
            version=$(echo $version | sed -E 's/"version":\s*"(.+)".*/\1/')
          else
            version=$(echo $version | sed -E 's/version=(.+)/\1/')
          if

          if [[ -n $version ]]; then
            break;
          fi
        } done

        echo "::set-output name=version::$version"

    - name: Docker tag
      id: tag
      shell: bash
      env:
        branch: ${{github.head_ref || github.ref_name}}
        version: ${{steps.version.outputs.version}}
      run: |
        version=$(echo ${{env.version}} | sed 's/-SNAPSHOT//')
        if [[ $(printenv GITHUB_REF) =~ main|release/.+|tags/.+ ]]; then
          [[ "${{env.version}}" =~ SNAPSHOT ]] && tag="${version}-beta" || tag="${version}"
        else
          branch=$(echo ${{env.branch}} | sed -E "s/[^a-z0-9\.-]/ /g" | sed -E "s/\s+/-/g")
          tag="${version}-${branch}"
        fi

        tag="${tag}-${{ github.run_number }}"

        echo "::set-output name=tag::${tag}"

    - name: Docker meta
      uses: docker/metadata-action@v4
      id: meta
      env:
        tag: ${{steps.tag.outputs.tag}}
      with:
        images: ${{inputs.image}}
        tags: |
          type=raw,value=${{env.tag}}

    - name: Build Docker Image
      id: build_image
      shell: bash
      run: |
        cat <<EOF > meta.json
          ${{steps.meta.outputs.json}}
        EOF

        image=$(cat meta.json | jq ".tags[0]" | tr -d '"')
        echo "::set-output name=image::${image}"
        cat meta.json | jq ".labels" \
                  | tr -d '{} ' \
                  | grep -v "^$" \
                  | sed 's/:/=/' \
                  | sed -E "s/^\"([^\"]+)\"(.*)/\1\2/" \
                  | tr -d "," > labels


        cmd="docker build"
        while read label; do { cmd="${cmd} --label $label";  } done < labels

        cmd="$cmd --label org.label-schema.vcs-ref="${{github.sha}}""

        cmd="$cmd -f ${{ inputs.dockerfilePath }}"
        cmd="$cmd -t $image"
        cmd="$cmd ${{ inputs.context }}"

        echo "$cmd"
        $cmd

        echo "::set-output name=docker_image::${image}"

    - name: Scan image for vulnerabilities
      if: ${{inputs.scanImage != 'false' }}
      uses: docker://docker.io/aquasec/trivy
      with:
        args: image --ignore-unfixed --exit-code 1 --security-checks vuln --severity "HIGH,CRITICAL" ${{steps.build_image.outputs.docker_image}}